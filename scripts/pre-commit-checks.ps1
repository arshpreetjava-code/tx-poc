#!/usr/bin/env pwsh# Ensure UTF-8 output across PowerShell versionsif ($PSVersionTable.PSVersion.Major -lt 6){    [Console]::OutputEncoding = [System.Text.Encoding]::UTF8}$ErrorActionPreference = 'Stop'Write-Output "Running enterprise-grade pre-commit checks (PowerShell)..."# --- Identify staged files safely ---$staged_files = git diff --cached --name-only --diff-filter=ACM 2> $nullif ( [string]::IsNullOrWhiteSpace($staged_files)){    Write-Output "No staged files to check."    exit 0}$fileList = $staged_files -split "\r?\n" | ForEach-Object { $_.Trim() } | Where-Object { $_ -ne '' }# Determine current branch (used by config checks)$currentBranch = (& git rev-parse --abbrev-ref HEAD 2> $null) -join ''# --- Run Unit Tests and Generate JaCoCo Report ---$hasMvn = Get-Command mvn -ErrorAction SilentlyContinueif ($null -ne $hasMvn){    Write-Host "`nRunning mvn test and generating JaCoCo report..." -ForegroundColor Cyan    # Remove problematic Structurizr/Lucene artifacts before build (best-effort)    Get-ChildItem -Path "target" -Recurse -Include "structurizr-lite.war" -ErrorAction SilentlyContinue |            ForEach-Object { Remove-Item $_.FullName -Force -ErrorAction SilentlyContinue }    & mvn -q clean test jacoco:report antrun:run}else{    Write-Warning "Maven not found; skipping tests."}# --- Run Static Analysis (Checkstyle, PMD, SpotBugs) ---if (Test-Path -Path "pom.xml"){    $pom = Get-Content -Raw -Path "pom.xml"    $goals = @()    if ($pom -match '<artifactId>\s*maven-checkstyle-plugin\s*</artifactId>')    {        $goals += 'checkstyle:check'    }    if ($pom -match '<artifactId>\s*pmd-maven-plugin\s*</artifactId>' -or $pom -match '<artifactId>\s*pmd-maven-plugin\s*</artifactId>')    {        $goals += 'pmd:check'    }    if ($pom -match '<artifactId>\s*spotbugs-maven-plugin\s*</artifactId>')    {        $goals += 'spotbugs:check'    }    if ($goals.Count -gt 0)    {        Write-Output "Running static analysis goals: $( $goals -join ' ' )"        try        {            & mvn -q $goals        }        catch        {            Write-Error "Static analysis failed. Fix issues before committing."; exit 1        }    }}# --- General banned patterns (applies to code files) ---$PATTERNS = @(    'System\.out\.print',    'printStackTrace\(',    'TODO',    'FIXME',    'AKIA[0-9A-Z]{16}',    'eval\(',    'Runtime\.getRuntime\(')$fail = $falseforeach ($file in $fileList){    if ($file -match '\.(java|yml|yaml|properties|xml|gradle|env)$')    {        try        {            if (Test-Path $file)            {                $content = Get-Content -Path $file -Raw            }            else            {                $content = git show ":$file" 2> $null            }        }        catch        {            Write-Host "Warning: Could not read content for $file" -ForegroundColor Yellow            continue        }        foreach ($p in $PATTERNS)        {            $matched = Select-String -InputObject $content -Pattern $p -AllMatches -ErrorAction SilentlyContinue            if ($matched)            {                Write-Error "Banned pattern '$p' found in $file"                $matched | ForEach-Object { Write-Output "  Line $( $_.LineNumber ): $($_.Line.Trim() )" }                $fail = $true            }        }    }}# --- Config Safety Checks (only on staged config files) ---foreach ($file in $fileList){    if ($file -match 'application.*\.(yml|yaml|properties)$')    {        try        {            if (Test-Path $file)            {                $content = Get-Content -Path $file -Raw            }            else            {                $content = git show ":$file" 2> $null            }        }        catch        {            Write-Host "Warning: Could not read content for $file" -ForegroundColor Yellow            continue        }        # Allow H2 only for local/dev branches        if ($content -match 'jdbc:h2')        {            if ($currentBranch -match '^(main|release|hotfix)')            {                Write-Error "Found H2 DB config in $file - not allowed in production or release branches (branch: $currentBranch)."                $fail = $true            }            else            {                Write-Output "H2 DB config found in $file - allowed for branch '$currentBranch'."            }        }        if ($content -match 'spring\.profiles\.active\s*=\s*prod' -and -not ($content -match 'spring\.config\.import'))        {            Write-Error "Missing config import validation for prod profile in $file"            $fail = $true        }        # Detect hard-coded passwords/secrets only in config files        if ($content -match '(?m)^[ \t]*\w*password\s*=')        {            Write-Error "Hard-coded password found in config file: $file"            $fail = $true        }        if ($content -match '(?m)^[ \t]*\w*secret\s*=')        {            Write-Error "Hard-coded secret found in config file: $file"            $fail = $true        }    }}# --- Enforce Minimum Test Coverage via JaCoCo ---$jacocoPath = 'target/site/jacoco/jacoco.xml'if (Test-Path $jacocoPath){    try    {        [xml]$report = Get-Content $jacocoPath        $lineCounter = $report.report.counter | Where-Object { $_.type -eq 'LINE' } | Select-Object -First 1        if ($null -ne $lineCounter -and $lineCounter.covered -ne $null -and $lineCounter.missed -ne $null)        {            $covered = [int]$lineCounter.covered            $missed = [int]$lineCounter.missed            $total = $covered + $missed            if ($total -eq 0)            {                Write-Error 'No executable lines found in JaCoCo report - likely no tests were executed.'; $fail = $true            }            else            {                $coverage = [math]::Round(($covered / $total) * 100, 2)                Write-Host ("Code Coverage: {0}%" -f $coverage) -ForegroundColor Cyan                $logFile = 'target/precommit_coverage_check.log'                $status = if ($fail)                {                    'FAIL'                }                else                {                    'PASS'                }                $logLine = "[{0}] Coverage: {1}% - Status: {2}" -f (Get-Date), $coverage, $status                Add-Content -Path $logFile -Value $logLine                # Threshold configuration (temporary/until coverage improved)                $threshold = 72.73                if ($coverage -lt $threshold)                {                    $msg = "Code coverage below threshold ({0}%). Current: {1}%" -f $threshold, $coverage                    Write-Host $msg -ForegroundColor Red                    $fail = $true                }                else                {                    $msg = "Code coverage above threshold. Current: {0}%" -f $coverage                    Write-Host $msg -ForegroundColor Green                }            }        }        else        {            Write-Error 'Could not find LINE coverage data in JaCoCo report.'            $fail = $true        }    }    catch    {        Write-Error "Failed to parse JaCoCo report: $( $_.Exception.Message )"        $fail = $true    }}else{    Write-Error "JaCoCo report not found at $jacocoPath. Ensure tests and coverage plugin are configured correctly."    $fail = $true}# --- Final Decision ---$result = if ($fail){    'FAILED'}else{    'PASSED'}$logSummary = "[{0}] Pre-commit result: {1}" -f (Get-Date), $resultAdd-Content -Path 'target/precommit_summary.log' -Value $logSummaryif ($fail){    Write-Host "`n[FAIL] One or more pre-commit checks failed. Please review the above issues." -ForegroundColor Red    exit 1}else{    Write-Host "`n[PASS] All pre-commit checks passed successfully." -ForegroundColor Green    exit 0}